import { isElement } from '../../lib/predicates'

export const htmlElementPredicates = {
  a: (el: any ): el is HTMLAnchorElement => isElement( el ) && el.localName === 'a',
  abbr: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'abbr',
  address: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'address',
  area: (el: any ): el is HTMLAreaElement => isElement( el ) && el.localName === 'area',
  article: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'article',
  aside: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'aside',
  audio: (el: any ): el is HTMLAudioElement => isElement( el ) && el.localName === 'audio',
  b: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'b',
  base: (el: any ): el is HTMLBaseElement => isElement( el ) && el.localName === 'base',
  bdi: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'bdi',
  bdo: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'bdo',
  blockquote: (el: any ): el is HTMLQuoteElement => isElement( el ) && el.localName === 'blockquote',
  body: (el: any ): el is HTMLBodyElement => isElement( el ) && el.localName === 'body',
  br: (el: any ): el is HTMLBRElement => isElement( el ) && el.localName === 'br',
  button: (el: any ): el is HTMLButtonElement => isElement( el ) && el.localName === 'button',
  canvas: (el: any ): el is HTMLCanvasElement => isElement( el ) && el.localName === 'canvas',
  caption: (el: any ): el is HTMLTableCaptionElement => isElement( el ) && el.localName === 'caption',
  cite: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'cite',
  code: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'code',
  col: (el: any ): el is HTMLTableColElement => isElement( el ) && el.localName === 'col',
  colgroup: (el: any ): el is HTMLTableColElement => isElement( el ) && el.localName === 'colgroup',
  data: (el: any ): el is HTMLDataElement => isElement( el ) && el.localName === 'data',
  datalist: (el: any ): el is HTMLDataListElement => isElement( el ) && el.localName === 'datalist',
  dd: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'dd',
  del: (el: any ): el is HTMLModElement => isElement( el ) && el.localName === 'del',
  details: (el: any ): el is HTMLDetailsElement => isElement( el ) && el.localName === 'details',
  dfn: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'dfn',
  dialog: (el: any ): el is HTMLDialogElement => isElement( el ) && el.localName === 'dialog',
  div: (el: any ): el is HTMLDivElement => isElement( el ) && el.localName === 'div',
  dl: (el: any ): el is HTMLDListElement => isElement( el ) && el.localName === 'dl',
  dt: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'dt',
  em: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'em',
  embed: (el: any ): el is HTMLEmbedElement => isElement( el ) && el.localName === 'embed',
  fieldset: (el: any ): el is HTMLFieldSetElement => isElement( el ) && el.localName === 'fieldset',
  figcaption: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'figcaption',
  figure: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'figure',
  footer: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'footer',
  form: (el: any ): el is HTMLFormElement => isElement( el ) && el.localName === 'form',
  h1: (el: any ): el is HTMLHeadingElement => isElement( el ) && el.localName === 'h1',
  h2: (el: any ): el is HTMLHeadingElement => isElement( el ) && el.localName === 'h2',
  h3: (el: any ): el is HTMLHeadingElement => isElement( el ) && el.localName === 'h3',
  h4: (el: any ): el is HTMLHeadingElement => isElement( el ) && el.localName === 'h4',
  h5: (el: any ): el is HTMLHeadingElement => isElement( el ) && el.localName === 'h5',
  h6: (el: any ): el is HTMLHeadingElement => isElement( el ) && el.localName === 'h6',
  head: (el: any ): el is HTMLHeadElement => isElement( el ) && el.localName === 'head',
  header: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'header',
  hgroup: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'hgroup',
  hr: (el: any ): el is HTMLHRElement => isElement( el ) && el.localName === 'hr',
  html: (el: any ): el is HTMLHtmlElement => isElement( el ) && el.localName === 'html',
  i: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'i',
  iframe: (el: any ): el is HTMLIFrameElement => isElement( el ) && el.localName === 'iframe',
  img: (el: any ): el is HTMLImageElement => isElement( el ) && el.localName === 'img',
  input: (el: any ): el is HTMLInputElement => isElement( el ) && el.localName === 'input',
  ins: (el: any ): el is HTMLModElement => isElement( el ) && el.localName === 'ins',
  kbd: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'kbd',
  label: (el: any ): el is HTMLLabelElement => isElement( el ) && el.localName === 'label',
  legend: (el: any ): el is HTMLLegendElement => isElement( el ) && el.localName === 'legend',
  li: (el: any ): el is HTMLLIElement => isElement( el ) && el.localName === 'li',
  link: (el: any ): el is HTMLLinkElement => isElement( el ) && el.localName === 'link',
  main: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'main',
  map: (el: any ): el is HTMLMapElement => isElement( el ) && el.localName === 'map',
  mark: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'mark',
  menu: (el: any ): el is HTMLMenuElement => isElement( el ) && el.localName === 'menu',
  meta: (el: any ): el is HTMLMetaElement => isElement( el ) && el.localName === 'meta',
  meter: (el: any ): el is HTMLMeterElement => isElement( el ) && el.localName === 'meter',
  nav: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'nav',
  noscript: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'noscript',
  object: (el: any ): el is HTMLObjectElement => isElement( el ) && el.localName === 'object',
  ol: (el: any ): el is HTMLOListElement => isElement( el ) && el.localName === 'ol',
  optgroup: (el: any ): el is HTMLOptGroupElement => isElement( el ) && el.localName === 'optgroup',
  option: (el: any ): el is HTMLOptionElement => isElement( el ) && el.localName === 'option',
  output: (el: any ): el is HTMLOutputElement => isElement( el ) && el.localName === 'output',
  p: (el: any ): el is HTMLParagraphElement => isElement( el ) && el.localName === 'p',
  picture: (el: any ): el is HTMLPictureElement => isElement( el ) && el.localName === 'picture',
  pre: (el: any ): el is HTMLPreElement => isElement( el ) && el.localName === 'pre',
  progress: (el: any ): el is HTMLProgressElement => isElement( el ) && el.localName === 'progress',
  q: (el: any ): el is HTMLQuoteElement => isElement( el ) && el.localName === 'q',
  rp: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'rp',
  rt: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'rt',
  ruby: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'ruby',
  s: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 's',
  samp: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'samp',
  script: (el: any ): el is HTMLScriptElement => isElement( el ) && el.localName === 'script',
  section: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'section',
  select: (el: any ): el is HTMLSelectElement => isElement( el ) && el.localName === 'select',
  slot: (el: any ): el is HTMLSlotElement => isElement( el ) && el.localName === 'slot',
  small: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'small',
  source: (el: any ): el is HTMLSourceElement => isElement( el ) && el.localName === 'source',
  span: (el: any ): el is HTMLSpanElement => isElement( el ) && el.localName === 'span',
  strong: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'strong',
  style: (el: any ): el is HTMLStyleElement => isElement( el ) && el.localName === 'style',
  sub: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'sub',
  summary: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'summary',
  sup: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'sup',
  table: (el: any ): el is HTMLTableElement => isElement( el ) && el.localName === 'table',
  tbody: (el: any ): el is HTMLTableSectionElement => isElement( el ) && el.localName === 'tbody',
  td: (el: any ): el is HTMLTableCellElement => isElement( el ) && el.localName === 'td',
  template: (el: any ): el is HTMLTemplateElement => isElement( el ) && el.localName === 'template',
  textarea: (el: any ): el is HTMLTextAreaElement => isElement( el ) && el.localName === 'textarea',
  tfoot: (el: any ): el is HTMLTableSectionElement => isElement( el ) && el.localName === 'tfoot',
  th: (el: any ): el is HTMLTableCellElement => isElement( el ) && el.localName === 'th',
  thead: (el: any ): el is HTMLTableSectionElement => isElement( el ) && el.localName === 'thead',
  time: (el: any ): el is HTMLTimeElement => isElement( el ) && el.localName === 'time',
  title: (el: any ): el is HTMLTitleElement => isElement( el ) && el.localName === 'title',
  tr: (el: any ): el is HTMLTableRowElement => isElement( el ) && el.localName === 'tr',
  track: (el: any ): el is HTMLTrackElement => isElement( el ) && el.localName === 'track',
  u: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'u',
  ul: (el: any ): el is HTMLUListElement => isElement( el ) && el.localName === 'ul',
  var: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'var',
  video: (el: any ): el is HTMLVideoElement => isElement( el ) && el.localName === 'video',
  wbr: (el: any ): el is HTMLElement => isElement( el ) && el.localName === 'wbr',
}

export const svgElementPredictes = {
  $a: (el: any) => el instanceof SVGAElement && el.localName === 'a',
  circle: (el: any) => el instanceof SVGCircleElement && el.localName === 'circle',
  clipPath: (el: any) => el instanceof SVGClipPathElement && el.localName === 'clipPath',
  defs: (el: any) => el instanceof SVGDefsElement && el.localName === 'defs',
  desc: (el: any) => el instanceof SVGDescElement && el.localName === 'desc',
  ellipse: (el: any) => el instanceof SVGEllipseElement && el.localName === 'ellipse',
  feBlend: (el: any) => el instanceof SVGFEBlendElement && el.localName === 'feBlend',
  feColorMatrix: (el: any) => el instanceof SVGFEColorMatrixElement && el.localName === 'feColorMatrix',
  feComponentTransfer: (el: any) => el instanceof SVGFEComponentTransferElement && el.localName === 'feComponentTransfer',
  feComposite: (el: any) => el instanceof SVGFECompositeElement && el.localName === 'feComposite',
  feConvolveMatrix: (el: any) => el instanceof SVGFEConvolveMatrixElement && el.localName === 'feConvolveMatrix',
  feDiffuseLighting: (el: any) => el instanceof SVGFEDiffuseLightingElement && el.localName === 'feDiffuseLighting',
  feDisplacementMap: (el: any) => el instanceof SVGFEDisplacementMapElement && el.localName === 'feDisplacementMap',
  feDistantLight: (el: any) => el instanceof SVGFEDistantLightElement && el.localName === 'feDistantLight',
  feDropShadow: (el: any) => el instanceof SVGFEDropShadowElement && el.localName === 'feDropShadow',
  feFlood: (el: any) => el instanceof SVGFEFloodElement && el.localName === 'feFlood',
  feFuncA: (el: any) => el instanceof SVGFEFuncAElement && el.localName === 'feFuncA',
  feFuncB: (el: any) => el instanceof SVGFEFuncBElement && el.localName === 'feFuncB',
  feFuncG: (el: any) => el instanceof SVGFEFuncGElement && el.localName === 'feFuncG',
  feFuncR: (el: any) => el instanceof SVGFEFuncRElement && el.localName === 'feFuncR',
  feGaussianBlur: (el: any) => el instanceof SVGFEGaussianBlurElement && el.localName === 'feGaussianBlur',
  feImage: (el: any) => el instanceof SVGFEImageElement && el.localName === 'feImage',
  feMerge: (el: any) => el instanceof SVGFEMergeElement && el.localName === 'feMerge',
  feMergeNode: (el: any) => el instanceof SVGFEMergeNodeElement && el.localName === 'feMergeNode',
  feMorphology: (el: any) => el instanceof SVGFEMorphologyElement && el.localName === 'feMorphology',
  feOffset: (el: any) => el instanceof SVGFEOffsetElement && el.localName === 'feOffset',
  fePointLight: (el: any) => el instanceof SVGFEPointLightElement && el.localName === 'fePointLight',
  feSpecularLighting: (el: any) => el instanceof SVGFESpecularLightingElement && el.localName === 'feSpecularLighting',
  feSpotLight: (el: any) => el instanceof SVGFESpotLightElement && el.localName === 'feSpotLight',
  feTile: (el: any) => el instanceof SVGFETileElement && el.localName === 'feTile',
  feTurbulence: (el: any) => el instanceof SVGFETurbulenceElement && el.localName === 'feTurbulence',
  filter: (el: any) => el instanceof SVGFilterElement && el.localName === 'filter',
  foreignObject: (el: any) => el instanceof SVGForeignObjectElement && el.localName === 'foreignObject',
  g: (el: any) => el instanceof SVGGElement && el.localName === 'g',
  image: (el: any) => el instanceof SVGImageElement && el.localName === 'image',
  line: (el: any) => el instanceof SVGLineElement && el.localName === 'line',
  linearGradient: (el: any) => el instanceof SVGLinearGradientElement && el.localName === 'linearGradient',
  marker: (el: any) => el instanceof SVGMarkerElement && el.localName === 'marker',
  mask: (el: any) => el instanceof SVGMaskElement && el.localName === 'mask',
  metadata: (el: any) => el instanceof SVGMetadataElement && el.localName === 'metadata',
  path: (el: any) => el instanceof SVGPathElement && el.localName === 'path',
  pattern: (el: any) => el instanceof SVGPatternElement && el.localName === 'pattern',
  polygon: (el: any) => el instanceof SVGPolygonElement && el.localName === 'polygon',
  polyline: (el: any) => el instanceof SVGPolylineElement && el.localName === 'polyline',
  radialGradient: (el: any) => el instanceof SVGRadialGradientElement && el.localName === 'radialGradient',
  rect: (el: any) => el instanceof SVGRectElement && el.localName === 'rect',
  stop: (el: any) => el instanceof SVGStopElement && el.localName === 'stop',
  svg: (el: any) => el instanceof SVGSVGElement && el.localName === 'svg',
  $switch  : (el: any) => el instanceof SVGSwitchElement && el.localName === 'switch',
  symbol: (el: any) => el instanceof SVGSymbolElement && el.localName === 'symbol',
  $text: (el: any) => el instanceof SVGTextElement && el.localName === 'text',
  textPath: (el: any) => el instanceof SVGTextPathElement && el.localName === 'textPath',
  tspan: (el: any) => el instanceof SVGTSpanElement && el.localName === 'tspan',
  use: (el: any) => el instanceof SVGUseElement && el.localName === 'use',
  view: (el: any) => el instanceof SVGViewElement && el.localName === 'view'
}
